<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on LoRaWAN Stack</title>
    <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/</link>
    <description>Recent content in Home on LoRaWAN Stack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Mar 2019 13:21:29 +0100</lastBuildDate>
    
	<atom:link href="https://github.com/TheThingsNetwork/lorawan-stack/v0.1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/installation/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/installation/</guid>
      <description>Docker Docker is available for most platforms, you can find most platform on its documentation website. If your platform isn&amp;rsquo;t listed, refer to your OS documentation. Note that Linux distributions are likely to provide docker through their package manager.
Docker-compose Along docker you will need to have docker-compose. It will allow us to quickly run and configure our docker images. Instruction can also be found on the docker documentation website.</description>
    </item>
    
    <item>
      <title>Configure &amp; Start</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/start/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/start/</guid>
      <description>Running the stack Download our Docker Compose configuration example. The stack can be run without any configuration, but for the purpose of this guide we provided you a basic one.
With the docker-compose.yml file in the directory of your terminal prompt, enter the following commands to initialize the database, create the first user admin, create the CLI OAuth client and start the stack:
 Download the necessary images:
$ docker-compose pull    Initialize the stack:</description>
    </item>
    
    <item>
      <title>Authenticate &amp; Manage</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/manage/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/manage/</guid>
      <description>Login using the CLI The CLI needs to be logged on in order to create gateways, applications, devices and API keys. With the stack running in one terminal session, login with the following command:
$ ttn-lw-cli login  A link will be provided to the OAuth login page where you can login using the credentials from the step ahead. Once you logged in in the browser, return to the terminal session to proceed.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/concepts/authentication/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/concepts/authentication/</guid>
      <description>API calls can be authorized either by providing an API key or an OAuth access token.
 Usage with HTTP Authorization Header: Bearer XXXXX Usage with gRPC call credentials (in the authorization header): Bearer XXXXX Usage with MQTT: Username: Gateway ID or Application ID, Password: XXXXX  Here, XXXXX is either a valid API key or a valid OAuth access token.
API keys API keys are the simplest way of authorization.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/administration/config/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/administration/config/</guid>
      <description>The stack binary can be configured by passing parameters.
Default config The stack can be used for local testing purposes without any additional configuration. To test and use the components to the fullest, you can use the --help flag to show available parameters, and refer to execution logs for recommendations.
Sources Runtime flags Example of runtime flags:
$ ttn-lw-stack start \ --cluster.keys db114f80fd0ebf2a7b69db7e5a56fce248e53600e256b3a85d5b0ab844bc1aa8 \ --http.cookie.hash-key 40847E55ED0CB34B3D491DC557326BF875FCE34EE0C8F50194E1BB3488055FA96D5CC4F3CF6C30C5F4922D8CEB4F72A1FE61317E1A7BC88619617AD6CEA983B3 \ --http.cookie.block-key 38E31BCAD8CFC067ABC9F2988967E387E15DF9ADDA14E63F446ED955EEEA4637  Configuration files You can specify a YAML configuration file with the -c flag.</description>
    </item>
    
    <item>
      <title>Network</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/administration/networking/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/administration/networking/</guid>
      <description> The Things Network Stack Networking The Things Network Stack uses a port per protocol, with a TLS counterpart when applicable. Ports can be shared by multiple services using the same protocol, i.e. gRPC services sharing management, data and events services.
Port Allocations    Purpose Protocol Authentication Port Port (TLS)     Gateway data Semtech Packet Forwarder None 1700 (UDP) N/A   Gateway data MQTT API key, token 1882 8882   Application data, events MQTT API key, token 1883 8883   Management, data, events gRPC API key, token 1884 8884   Management HTTP API key, token 1885 8885    </description>
    </item>
    
    <item>
      <title>Device interaction</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/traffic/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/traffic/</guid>
      <description>Using the MQTT broker In order to use the MQTT broker it is necessary to register a new API key that will be used during the authentication process:
$ ttn-lw-cli app api-keys create --application-id app1 --right-application-traffic-down-write --right-application-traffic-read  Note that this new API key can both receive uplinks and schedule downlinks. You can now login using an MQTT client using the username app1 (the application name) and the newly generated API key as password.</description>
    </item>
    
    <item>
      <title>Gateway Server</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/components/gatewayserver/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/components/gatewayserver/</guid>
      <description>Gateway Server The Gateway Server component of The Things Network Stack is responsible for the gateways that are connected to it. It includes roughly the same functionality as the Router component of our v2 network stack.
Connectivity to Gateways Gateways can connect to Gateway Servers over multiple protocols.
UDP protocol Gateways can connect to a Gateway Server over the UDP protocol. The EUI that is sent with every message is used to identify the gateway.</description>
    </item>
    
    <item>
      <title>Integrate</title>
      <link>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/integrate/</link>
      <pubDate>Wed, 27 Mar 2019 13:21:29 +0100</pubDate>
      
      <guid>https://github.com/TheThingsNetwork/lorawan-stack/v0.1/gettingstarted/integrate/</guid>
      <description>Using webhooks The webhooks feature allows the application server to send application related messages to specific HTTP(S) endpoints. Creating a webhook requires you to have an endpoint available as a message sink.
$ ttn-lw-cli app webhook set --application-id app1 --webhook-id wh1 --base-url https://example.com/lorahooks --join-accept.path &amp;quot;join&amp;quot; --format &amp;quot;json&amp;quot;  This will create an webhook wh1 for the application app1 with a base URL https://example.com/lorahooks and a join-accept path join. When a device of the application app1 joins the network, the application server will do a POST request on the endpoint https://example.</description>
    </item>
    
  </channel>
</rss>